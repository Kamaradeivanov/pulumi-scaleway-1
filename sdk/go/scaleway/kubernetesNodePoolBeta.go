// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates and manages Scaleway Kubernetes cluster pools. For more information, see [the documentation](https://developers.scaleway.com/en/products/k8s/api/).
type KubernetesNodePoolBeta struct {
	pulumi.CustomResourceState

	// Enable the autohealing on the pool
	Autohealing pulumi.BoolPtrOutput `pulumi:"autohealing"`
	// Enable the autoscaling on the pool
	Autoscaling pulumi.BoolPtrOutput `pulumi:"autoscaling"`
	// The ID of the cluster on which this pool will be created
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Container runtime for the pool
	ContainerRuntime pulumi.StringPtrOutput `pulumi:"containerRuntime"`
	// The date and time of the creation of the pool
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Maximum size of the pool
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// Minimun size of the pool
	MinSize pulumi.IntPtrOutput `pulumi:"minSize"`
	// The name of the cluster
	Name pulumi.StringOutput `pulumi:"name"`
	// Server type of the pool servers
	NodeType pulumi.StringOutput                   `pulumi:"nodeType"`
	Nodes    KubernetesNodePoolBetaNodeArrayOutput `pulumi:"nodes"`
	// ID of the placement group
	PlacementGroupId pulumi.StringPtrOutput `pulumi:"placementGroupId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// Size of the pool
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the pool
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags associated with the pool
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The date and time of the last update of the pool
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The Kubernetes version of the pool
	Version pulumi.StringOutput `pulumi:"version"`
	// Whether to wait for the pool to be ready
	WaitForPoolReady pulumi.BoolPtrOutput `pulumi:"waitForPoolReady"`
}

// NewKubernetesNodePoolBeta registers a new resource with the given unique name, arguments, and options.
func NewKubernetesNodePoolBeta(ctx *pulumi.Context,
	name string, args *KubernetesNodePoolBetaArgs, opts ...pulumi.ResourceOption) (*KubernetesNodePoolBeta, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.NodeType == nil {
		return nil, errors.New("missing required argument 'NodeType'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil {
		args = &KubernetesNodePoolBetaArgs{}
	}
	var resource KubernetesNodePoolBeta
	err := ctx.RegisterResource("scaleway:index/kubernetesNodePoolBeta:KubernetesNodePoolBeta", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesNodePoolBeta gets an existing KubernetesNodePoolBeta resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesNodePoolBeta(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesNodePoolBetaState, opts ...pulumi.ResourceOption) (*KubernetesNodePoolBeta, error) {
	var resource KubernetesNodePoolBeta
	err := ctx.ReadResource("scaleway:index/kubernetesNodePoolBeta:KubernetesNodePoolBeta", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesNodePoolBeta resources.
type kubernetesNodePoolBetaState struct {
	// Enable the autohealing on the pool
	Autohealing *bool `pulumi:"autohealing"`
	// Enable the autoscaling on the pool
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the cluster on which this pool will be created
	ClusterId *string `pulumi:"clusterId"`
	// Container runtime for the pool
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// The date and time of the creation of the pool
	CreatedAt *string `pulumi:"createdAt"`
	// Maximum size of the pool
	MaxSize *int `pulumi:"maxSize"`
	// Minimun size of the pool
	MinSize *int `pulumi:"minSize"`
	// The name of the cluster
	Name *string `pulumi:"name"`
	// Server type of the pool servers
	NodeType *string                      `pulumi:"nodeType"`
	Nodes    []KubernetesNodePoolBetaNode `pulumi:"nodes"`
	// ID of the placement group
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Size of the pool
	Size *int `pulumi:"size"`
	// The status of the pool
	Status *string `pulumi:"status"`
	// The tags associated with the pool
	Tags []string `pulumi:"tags"`
	// The date and time of the last update of the pool
	UpdatedAt *string `pulumi:"updatedAt"`
	// The Kubernetes version of the pool
	Version *string `pulumi:"version"`
	// Whether to wait for the pool to be ready
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
}

type KubernetesNodePoolBetaState struct {
	// Enable the autohealing on the pool
	Autohealing pulumi.BoolPtrInput
	// Enable the autoscaling on the pool
	Autoscaling pulumi.BoolPtrInput
	// The ID of the cluster on which this pool will be created
	ClusterId pulumi.StringPtrInput
	// Container runtime for the pool
	ContainerRuntime pulumi.StringPtrInput
	// The date and time of the creation of the pool
	CreatedAt pulumi.StringPtrInput
	// Maximum size of the pool
	MaxSize pulumi.IntPtrInput
	// Minimun size of the pool
	MinSize pulumi.IntPtrInput
	// The name of the cluster
	Name pulumi.StringPtrInput
	// Server type of the pool servers
	NodeType pulumi.StringPtrInput
	Nodes    KubernetesNodePoolBetaNodeArrayInput
	// ID of the placement group
	PlacementGroupId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Size of the pool
	Size pulumi.IntPtrInput
	// The status of the pool
	Status pulumi.StringPtrInput
	// The tags associated with the pool
	Tags pulumi.StringArrayInput
	// The date and time of the last update of the pool
	UpdatedAt pulumi.StringPtrInput
	// The Kubernetes version of the pool
	Version pulumi.StringPtrInput
	// Whether to wait for the pool to be ready
	WaitForPoolReady pulumi.BoolPtrInput
}

func (KubernetesNodePoolBetaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolBetaState)(nil)).Elem()
}

type kubernetesNodePoolBetaArgs struct {
	// Enable the autohealing on the pool
	Autohealing *bool `pulumi:"autohealing"`
	// Enable the autoscaling on the pool
	Autoscaling *bool `pulumi:"autoscaling"`
	// The ID of the cluster on which this pool will be created
	ClusterId string `pulumi:"clusterId"`
	// Container runtime for the pool
	ContainerRuntime *string `pulumi:"containerRuntime"`
	// Maximum size of the pool
	MaxSize *int `pulumi:"maxSize"`
	// Minimun size of the pool
	MinSize *int `pulumi:"minSize"`
	// The name of the cluster
	Name *string `pulumi:"name"`
	// Server type of the pool servers
	NodeType string `pulumi:"nodeType"`
	// ID of the placement group
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// Size of the pool
	Size int `pulumi:"size"`
	// The tags associated with the pool
	Tags []string `pulumi:"tags"`
	// Whether to wait for the pool to be ready
	WaitForPoolReady *bool `pulumi:"waitForPoolReady"`
}

// The set of arguments for constructing a KubernetesNodePoolBeta resource.
type KubernetesNodePoolBetaArgs struct {
	// Enable the autohealing on the pool
	Autohealing pulumi.BoolPtrInput
	// Enable the autoscaling on the pool
	Autoscaling pulumi.BoolPtrInput
	// The ID of the cluster on which this pool will be created
	ClusterId pulumi.StringInput
	// Container runtime for the pool
	ContainerRuntime pulumi.StringPtrInput
	// Maximum size of the pool
	MaxSize pulumi.IntPtrInput
	// Minimun size of the pool
	MinSize pulumi.IntPtrInput
	// The name of the cluster
	Name pulumi.StringPtrInput
	// Server type of the pool servers
	NodeType pulumi.StringInput
	// ID of the placement group
	PlacementGroupId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// Size of the pool
	Size pulumi.IntInput
	// The tags associated with the pool
	Tags pulumi.StringArrayInput
	// Whether to wait for the pool to be ready
	WaitForPoolReady pulumi.BoolPtrInput
}

func (KubernetesNodePoolBetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodePoolBetaArgs)(nil)).Elem()
}
