// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LoadbalancerFrontendBeta struct {
	pulumi.CustomResourceState

	// ACL rules
	Acls LoadbalancerFrontendBetaAclArrayOutput `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// Certificate ID
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// TCP port to listen on the front side
	InboundPort pulumi.IntOutput `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The name of the frontend
	Name pulumi.StringOutput `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrOutput `pulumi:"timeoutClient"`
}

// NewLoadbalancerFrontendBeta registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerFrontendBeta(ctx *pulumi.Context,
	name string, args *LoadbalancerFrontendBetaArgs, opts ...pulumi.ResourceOption) (*LoadbalancerFrontendBeta, error) {
	if args == nil || args.BackendId == nil {
		return nil, errors.New("missing required argument 'BackendId'")
	}
	if args == nil || args.InboundPort == nil {
		return nil, errors.New("missing required argument 'InboundPort'")
	}
	if args == nil || args.LbId == nil {
		return nil, errors.New("missing required argument 'LbId'")
	}
	if args == nil {
		args = &LoadbalancerFrontendBetaArgs{}
	}
	var resource LoadbalancerFrontendBeta
	err := ctx.RegisterResource("scaleway:index/loadbalancerFrontendBeta:LoadbalancerFrontendBeta", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerFrontendBeta gets an existing LoadbalancerFrontendBeta resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerFrontendBeta(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerFrontendBetaState, opts ...pulumi.ResourceOption) (*LoadbalancerFrontendBeta, error) {
	var resource LoadbalancerFrontendBeta
	err := ctx.ReadResource("scaleway:index/loadbalancerFrontendBeta:LoadbalancerFrontendBeta", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerFrontendBeta resources.
type loadbalancerFrontendBetaState struct {
	// ACL rules
	Acls []LoadbalancerFrontendBetaAcl `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId *string `pulumi:"backendId"`
	// Certificate ID
	CertificateId *string `pulumi:"certificateId"`
	// TCP port to listen on the front side
	InboundPort *int `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId *string `pulumi:"lbId"`
	// The name of the frontend
	Name *string `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient *string `pulumi:"timeoutClient"`
}

type LoadbalancerFrontendBetaState struct {
	// ACL rules
	Acls LoadbalancerFrontendBetaAclArrayInput
	// The load-balancer backend ID
	BackendId pulumi.StringPtrInput
	// Certificate ID
	CertificateId pulumi.StringPtrInput
	// TCP port to listen on the front side
	InboundPort pulumi.IntPtrInput
	// The load-balancer ID
	LbId pulumi.StringPtrInput
	// The name of the frontend
	Name pulumi.StringPtrInput
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendBetaState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendBetaState)(nil)).Elem()
}

type loadbalancerFrontendBetaArgs struct {
	// ACL rules
	Acls []LoadbalancerFrontendBetaAcl `pulumi:"acls"`
	// The load-balancer backend ID
	BackendId string `pulumi:"backendId"`
	// Certificate ID
	CertificateId *string `pulumi:"certificateId"`
	// TCP port to listen on the front side
	InboundPort int `pulumi:"inboundPort"`
	// The load-balancer ID
	LbId string `pulumi:"lbId"`
	// The name of the frontend
	Name *string `pulumi:"name"`
	// Set the maximum inactivity time on the client side
	TimeoutClient *string `pulumi:"timeoutClient"`
}

// The set of arguments for constructing a LoadbalancerFrontendBeta resource.
type LoadbalancerFrontendBetaArgs struct {
	// ACL rules
	Acls LoadbalancerFrontendBetaAclArrayInput
	// The load-balancer backend ID
	BackendId pulumi.StringInput
	// Certificate ID
	CertificateId pulumi.StringPtrInput
	// TCP port to listen on the front side
	InboundPort pulumi.IntInput
	// The load-balancer ID
	LbId pulumi.StringInput
	// The name of the frontend
	Name pulumi.StringPtrInput
	// Set the maximum inactivity time on the client side
	TimeoutClient pulumi.StringPtrInput
}

func (LoadbalancerFrontendBetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerFrontendBetaArgs)(nil)).Elem()
}
