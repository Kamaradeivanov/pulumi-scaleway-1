// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages Scaleway Kubernetes cluster pools. For more information, see [the documentation](https://developers.scaleway.com/en/products/k8s/api/).
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-scaleway/blob/master/website/docs/r/k8s_pool_beta.html.markdown.
 */
export class KubernetesNodePoolBeta extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePoolBeta resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolBetaState, opts?: pulumi.CustomResourceOptions): KubernetesNodePoolBeta {
        return new KubernetesNodePoolBeta(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/kubernetesNodePoolBeta:KubernetesNodePoolBeta';

    /**
     * Returns true if the given object is an instance of KubernetesNodePoolBeta.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePoolBeta {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePoolBeta.__pulumiType;
    }

    /**
     * Enable the autohealing on the pool
     */
    public readonly autohealing!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the autoscaling on the pool
     */
    public readonly autoscaling!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the cluster on which this pool will be created
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Container runtime for the pool
     */
    public readonly containerRuntime!: pulumi.Output<string | undefined>;
    /**
     * The date and time of the creation of the pool
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Maximum size of the pool
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * Minimun size of the pool
     */
    public readonly minSize!: pulumi.Output<number | undefined>;
    /**
     * The name of the cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Server type of the pool servers
     */
    public readonly nodeType!: pulumi.Output<string>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.KubernetesNodePoolBetaNode[]>;
    /**
     * ID of the placement group
     */
    public readonly placementGroupId!: pulumi.Output<string | undefined>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Size of the pool
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The status of the pool
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tags associated with the pool
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The date and time of the last update of the pool
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The Kubernetes version of the pool
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * Whether to wait for the pool to be ready
     */
    public readonly waitForPoolReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a KubernetesNodePoolBeta resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodePoolBetaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodePoolBetaArgs | KubernetesNodePoolBetaState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KubernetesNodePoolBetaState | undefined;
            inputs["autohealing"] = state ? state.autohealing : undefined;
            inputs["autoscaling"] = state ? state.autoscaling : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["containerRuntime"] = state ? state.containerRuntime : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["maxSize"] = state ? state.maxSize : undefined;
            inputs["minSize"] = state ? state.minSize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nodeType"] = state ? state.nodeType : undefined;
            inputs["nodes"] = state ? state.nodes : undefined;
            inputs["placementGroupId"] = state ? state.placementGroupId : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["waitForPoolReady"] = state ? state.waitForPoolReady : undefined;
        } else {
            const args = argsOrState as KubernetesNodePoolBetaArgs | undefined;
            if (!args || args.clusterId === undefined) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (!args || args.nodeType === undefined) {
                throw new Error("Missing required property 'nodeType'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            inputs["autohealing"] = args ? args.autohealing : undefined;
            inputs["autoscaling"] = args ? args.autoscaling : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["containerRuntime"] = args ? args.containerRuntime : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nodeType"] = args ? args.nodeType : undefined;
            inputs["placementGroupId"] = args ? args.placementGroupId : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["waitForPoolReady"] = args ? args.waitForPoolReady : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["nodes"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(KubernetesNodePoolBeta.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePoolBeta resources.
 */
export interface KubernetesNodePoolBetaState {
    /**
     * Enable the autohealing on the pool
     */
    readonly autohealing?: pulumi.Input<boolean>;
    /**
     * Enable the autoscaling on the pool
     */
    readonly autoscaling?: pulumi.Input<boolean>;
    /**
     * The ID of the cluster on which this pool will be created
     */
    readonly clusterId?: pulumi.Input<string>;
    /**
     * Container runtime for the pool
     */
    readonly containerRuntime?: pulumi.Input<string>;
    /**
     * The date and time of the creation of the pool
     */
    readonly createdAt?: pulumi.Input<string>;
    /**
     * Maximum size of the pool
     */
    readonly maxSize?: pulumi.Input<number>;
    /**
     * Minimun size of the pool
     */
    readonly minSize?: pulumi.Input<number>;
    /**
     * The name of the cluster
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Server type of the pool servers
     */
    readonly nodeType?: pulumi.Input<string>;
    readonly nodes?: pulumi.Input<pulumi.Input<inputs.KubernetesNodePoolBetaNode>[]>;
    /**
     * ID of the placement group
     */
    readonly placementGroupId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    readonly region?: pulumi.Input<string>;
    /**
     * Size of the pool
     */
    readonly size?: pulumi.Input<number>;
    /**
     * The status of the pool
     */
    readonly status?: pulumi.Input<string>;
    /**
     * The tags associated with the pool
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time of the last update of the pool
     */
    readonly updatedAt?: pulumi.Input<string>;
    /**
     * The Kubernetes version of the pool
     */
    readonly version?: pulumi.Input<string>;
    /**
     * Whether to wait for the pool to be ready
     */
    readonly waitForPoolReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a KubernetesNodePoolBeta resource.
 */
export interface KubernetesNodePoolBetaArgs {
    /**
     * Enable the autohealing on the pool
     */
    readonly autohealing?: pulumi.Input<boolean>;
    /**
     * Enable the autoscaling on the pool
     */
    readonly autoscaling?: pulumi.Input<boolean>;
    /**
     * The ID of the cluster on which this pool will be created
     */
    readonly clusterId: pulumi.Input<string>;
    /**
     * Container runtime for the pool
     */
    readonly containerRuntime?: pulumi.Input<string>;
    /**
     * Maximum size of the pool
     */
    readonly maxSize?: pulumi.Input<number>;
    /**
     * Minimun size of the pool
     */
    readonly minSize?: pulumi.Input<number>;
    /**
     * The name of the cluster
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Server type of the pool servers
     */
    readonly nodeType: pulumi.Input<string>;
    /**
     * ID of the placement group
     */
    readonly placementGroupId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    readonly region?: pulumi.Input<string>;
    /**
     * Size of the pool
     */
    readonly size: pulumi.Input<number>;
    /**
     * The tags associated with the pool
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to wait for the pool to be ready
     */
    readonly waitForPoolReady?: pulumi.Input<boolean>;
}
