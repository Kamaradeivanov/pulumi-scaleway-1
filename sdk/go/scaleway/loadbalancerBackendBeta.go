// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LoadbalancerBackendBeta struct {
	pulumi.CustomResourceState

	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntOutput `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrOutput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol pulumi.StringOutput `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrOutput                           `pulumi:"healthCheckDelay"`
	HealthCheckHttp  LoadbalancerBackendBetaHealthCheckHttpPtrOutput  `pulumi:"healthCheckHttp"`
	HealthCheckHttps LoadbalancerBackendBetaHealthCheckHttpsPtrOutput `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrOutput `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort pulumi.IntOutput                            `pulumi:"healthCheckPort"`
	HealthCheckTcp  LoadbalancerBackendBetaHealthCheckTcpOutput `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrOutput `pulumi:"healthCheckTimeout"`
	// The load-balancer ID
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The name of the backend
	Name pulumi.StringOutput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrOutput `pulumi:"onMarkedDownAction"`
	// Enables PROXY protocol version 2
	SendProxyV2 pulumi.BoolPtrOutput `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayOutput `pulumi:"serverIps"`
	// Load balancing algorithm
	StickySessions pulumi.StringPtrOutput `pulumi:"stickySessions"`
	// Cookie name for for sticky sessions
	StickySessionsCookieName pulumi.StringPtrOutput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrOutput `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrOutput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrOutput `pulumi:"timeoutTunnel"`
}

// NewLoadbalancerBackendBeta registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerBackendBeta(ctx *pulumi.Context,
	name string, args *LoadbalancerBackendBetaArgs, opts ...pulumi.ResourceOption) (*LoadbalancerBackendBeta, error) {
	if args == nil || args.ForwardPort == nil {
		return nil, errors.New("missing required argument 'ForwardPort'")
	}
	if args == nil || args.ForwardProtocol == nil {
		return nil, errors.New("missing required argument 'ForwardProtocol'")
	}
	if args == nil || args.LbId == nil {
		return nil, errors.New("missing required argument 'LbId'")
	}
	if args == nil {
		args = &LoadbalancerBackendBetaArgs{}
	}
	var resource LoadbalancerBackendBeta
	err := ctx.RegisterResource("scaleway:index/loadbalancerBackendBeta:LoadbalancerBackendBeta", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerBackendBeta gets an existing LoadbalancerBackendBeta resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerBackendBeta(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerBackendBetaState, opts ...pulumi.ResourceOption) (*LoadbalancerBackendBeta, error) {
	var resource LoadbalancerBackendBeta
	err := ctx.ReadResource("scaleway:index/loadbalancerBackendBeta:LoadbalancerBackendBeta", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerBackendBeta resources.
type loadbalancerBackendBetaState struct {
	// User sessions will be forwarded to this port of backend servers
	ForwardPort *int `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol *string `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay *string                                  `pulumi:"healthCheckDelay"`
	HealthCheckHttp  *LoadbalancerBackendBetaHealthCheckHttp  `pulumi:"healthCheckHttp"`
	HealthCheckHttps *LoadbalancerBackendBetaHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort *int                                   `pulumi:"healthCheckPort"`
	HealthCheckTcp  *LoadbalancerBackendBetaHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// The load-balancer ID
	LbId *string `pulumi:"lbId"`
	// The name of the backend
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Enables PROXY protocol version 2
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps []string `pulumi:"serverIps"`
	// Load balancing algorithm
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for for sticky sessions
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

type LoadbalancerBackendBetaState struct {
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntPtrInput
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol
	ForwardProtocol pulumi.StringPtrInput
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrInput
	HealthCheckHttp  LoadbalancerBackendBetaHealthCheckHttpPtrInput
	HealthCheckHttps LoadbalancerBackendBetaHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort pulumi.IntPtrInput
	HealthCheckTcp  LoadbalancerBackendBetaHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrInput
	// The load-balancer ID
	LbId pulumi.StringPtrInput
	// The name of the backend
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrInput
	// Enables PROXY protocol version 2
	SendProxyV2 pulumi.BoolPtrInput
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayInput
	// Load balancing algorithm
	StickySessions pulumi.StringPtrInput
	// Cookie name for for sticky sessions
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrInput
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrInput
}

func (LoadbalancerBackendBetaState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendBetaState)(nil)).Elem()
}

type loadbalancerBackendBetaArgs struct {
	// User sessions will be forwarded to this port of backend servers
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two HC requests
	HealthCheckDelay *string                                  `pulumi:"healthCheckDelay"`
	HealthCheckHttp  *LoadbalancerBackendBetaHealthCheckHttp  `pulumi:"healthCheckHttp"`
	HealthCheckHttps *LoadbalancerBackendBetaHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort *int                                   `pulumi:"healthCheckPort"`
	HealthCheckTcp  *LoadbalancerBackendBetaHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// The load-balancer ID
	LbId string `pulumi:"lbId"`
	// The name of the backend
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Enables PROXY protocol version 2
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps []string `pulumi:"serverIps"`
	// Load balancing algorithm
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for for sticky sessions
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

// The set of arguments for constructing a LoadbalancerBackendBeta resource.
type LoadbalancerBackendBetaArgs struct {
	// User sessions will be forwarded to this port of backend servers
	ForwardPort pulumi.IntInput
	// Load balancing algorithm
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol
	ForwardProtocol pulumi.StringInput
	// Interval between two HC requests
	HealthCheckDelay pulumi.StringPtrInput
	HealthCheckHttp  LoadbalancerBackendBetaHealthCheckHttpPtrInput
	HealthCheckHttps LoadbalancerBackendBetaHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to. Default to `forward_port`
	HealthCheckPort pulumi.IntPtrInput
	HealthCheckTcp  LoadbalancerBackendBetaHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed
	HealthCheckTimeout pulumi.StringPtrInput
	// The load-balancer ID
	LbId pulumi.StringInput
	// The name of the backend
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down
	OnMarkedDownAction pulumi.StringPtrInput
	// Enables PROXY protocol version 2
	SendProxyV2 pulumi.BoolPtrInput
	// Backend server IP addresses list (IPv4 or IPv6)
	ServerIps pulumi.StringArrayInput
	// Load balancing algorithm
	StickySessions pulumi.StringPtrInput
	// Cookie name for for sticky sessions
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time
	TimeoutConnect pulumi.StringPtrInput
	// Maximum server connection inactivity time
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time
	TimeoutTunnel pulumi.StringPtrInput
}

func (LoadbalancerBackendBetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerBackendBetaArgs)(nil)).Elem()
}
