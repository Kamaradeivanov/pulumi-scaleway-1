// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadbalancerFrontendBeta extends pulumi.CustomResource {
    /**
     * Get an existing LoadbalancerFrontendBeta resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerFrontendBetaState, opts?: pulumi.CustomResourceOptions): LoadbalancerFrontendBeta {
        return new LoadbalancerFrontendBeta(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/loadbalancerFrontendBeta:LoadbalancerFrontendBeta';

    /**
     * Returns true if the given object is an instance of LoadbalancerFrontendBeta.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadbalancerFrontendBeta {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadbalancerFrontendBeta.__pulumiType;
    }

    /**
     * ACL rules
     */
    public readonly acls!: pulumi.Output<outputs.LoadbalancerFrontendBetaAcl[] | undefined>;
    /**
     * The load-balancer backend ID
     */
    public readonly backendId!: pulumi.Output<string>;
    /**
     * Certificate ID
     */
    public readonly certificateId!: pulumi.Output<string | undefined>;
    /**
     * TCP port to listen on the front side
     */
    public readonly inboundPort!: pulumi.Output<number>;
    /**
     * The load-balancer ID
     */
    public readonly lbId!: pulumi.Output<string>;
    /**
     * The name of the frontend
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set the maximum inactivity time on the client side
     */
    public readonly timeoutClient!: pulumi.Output<string | undefined>;

    /**
     * Create a LoadbalancerFrontendBeta resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerFrontendBetaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerFrontendBetaArgs | LoadbalancerFrontendBetaState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LoadbalancerFrontendBetaState | undefined;
            inputs["acls"] = state ? state.acls : undefined;
            inputs["backendId"] = state ? state.backendId : undefined;
            inputs["certificateId"] = state ? state.certificateId : undefined;
            inputs["inboundPort"] = state ? state.inboundPort : undefined;
            inputs["lbId"] = state ? state.lbId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["timeoutClient"] = state ? state.timeoutClient : undefined;
        } else {
            const args = argsOrState as LoadbalancerFrontendBetaArgs | undefined;
            if (!args || args.backendId === undefined) {
                throw new Error("Missing required property 'backendId'");
            }
            if (!args || args.inboundPort === undefined) {
                throw new Error("Missing required property 'inboundPort'");
            }
            if (!args || args.lbId === undefined) {
                throw new Error("Missing required property 'lbId'");
            }
            inputs["acls"] = args ? args.acls : undefined;
            inputs["backendId"] = args ? args.backendId : undefined;
            inputs["certificateId"] = args ? args.certificateId : undefined;
            inputs["inboundPort"] = args ? args.inboundPort : undefined;
            inputs["lbId"] = args ? args.lbId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["timeoutClient"] = args ? args.timeoutClient : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LoadbalancerFrontendBeta.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadbalancerFrontendBeta resources.
 */
export interface LoadbalancerFrontendBetaState {
    /**
     * ACL rules
     */
    readonly acls?: pulumi.Input<pulumi.Input<inputs.LoadbalancerFrontendBetaAcl>[]>;
    /**
     * The load-balancer backend ID
     */
    readonly backendId?: pulumi.Input<string>;
    /**
     * Certificate ID
     */
    readonly certificateId?: pulumi.Input<string>;
    /**
     * TCP port to listen on the front side
     */
    readonly inboundPort?: pulumi.Input<number>;
    /**
     * The load-balancer ID
     */
    readonly lbId?: pulumi.Input<string>;
    /**
     * The name of the frontend
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Set the maximum inactivity time on the client side
     */
    readonly timeoutClient?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadbalancerFrontendBeta resource.
 */
export interface LoadbalancerFrontendBetaArgs {
    /**
     * ACL rules
     */
    readonly acls?: pulumi.Input<pulumi.Input<inputs.LoadbalancerFrontendBetaAcl>[]>;
    /**
     * The load-balancer backend ID
     */
    readonly backendId: pulumi.Input<string>;
    /**
     * Certificate ID
     */
    readonly certificateId?: pulumi.Input<string>;
    /**
     * TCP port to listen on the front side
     */
    readonly inboundPort: pulumi.Input<number>;
    /**
     * The load-balancer ID
     */
    readonly lbId: pulumi.Input<string>;
    /**
     * The name of the frontend
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Set the maximum inactivity time on the client side
     */
    readonly timeoutClient?: pulumi.Input<string>;
}
