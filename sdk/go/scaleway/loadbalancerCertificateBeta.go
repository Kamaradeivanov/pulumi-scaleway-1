// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scaleway

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LoadbalancerCertificateBeta struct {
	pulumi.CustomResourceState

	// The main domain name of the certificate
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// The custom type certificate type configuration
	CustomCertificate LoadbalancerCertificateBetaCustomCertificatePtrOutput `pulumi:"customCertificate"`
	// The identifier (SHA-1) of the certificate
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The load-balancer ID
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// The Let's Encrypt type certificate configuration
	Letsencrypt LoadbalancerCertificateBetaLetsencryptPtrOutput `pulumi:"letsencrypt"`
	// The name of the load-balancer certificate
	Name pulumi.StringOutput `pulumi:"name"`
	// The not valid after validity bound timestamp
	NotValidAfter pulumi.StringOutput `pulumi:"notValidAfter"`
	// The not valid before validity bound timestamp
	NotValidBefore pulumi.StringOutput `pulumi:"notValidBefore"`
	// The status of certificate
	Status pulumi.StringOutput `pulumi:"status"`
	// The alternative domain names of the certificate
	SubjectAlternativeName pulumi.StringOutput `pulumi:"subjectAlternativeName"`
}

// NewLoadbalancerCertificateBeta registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerCertificateBeta(ctx *pulumi.Context,
	name string, args *LoadbalancerCertificateBetaArgs, opts ...pulumi.ResourceOption) (*LoadbalancerCertificateBeta, error) {
	if args == nil || args.LbId == nil {
		return nil, errors.New("missing required argument 'LbId'")
	}
	if args == nil {
		args = &LoadbalancerCertificateBetaArgs{}
	}
	var resource LoadbalancerCertificateBeta
	err := ctx.RegisterResource("scaleway:index/loadbalancerCertificateBeta:LoadbalancerCertificateBeta", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerCertificateBeta gets an existing LoadbalancerCertificateBeta resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerCertificateBeta(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerCertificateBetaState, opts ...pulumi.ResourceOption) (*LoadbalancerCertificateBeta, error) {
	var resource LoadbalancerCertificateBeta
	err := ctx.ReadResource("scaleway:index/loadbalancerCertificateBeta:LoadbalancerCertificateBeta", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerCertificateBeta resources.
type loadbalancerCertificateBetaState struct {
	// The main domain name of the certificate
	CommonName *string `pulumi:"commonName"`
	// The custom type certificate type configuration
	CustomCertificate *LoadbalancerCertificateBetaCustomCertificate `pulumi:"customCertificate"`
	// The identifier (SHA-1) of the certificate
	Fingerprint *string `pulumi:"fingerprint"`
	// The load-balancer ID
	LbId *string `pulumi:"lbId"`
	// The Let's Encrypt type certificate configuration
	Letsencrypt *LoadbalancerCertificateBetaLetsencrypt `pulumi:"letsencrypt"`
	// The name of the load-balancer certificate
	Name *string `pulumi:"name"`
	// The not valid after validity bound timestamp
	NotValidAfter *string `pulumi:"notValidAfter"`
	// The not valid before validity bound timestamp
	NotValidBefore *string `pulumi:"notValidBefore"`
	// The status of certificate
	Status *string `pulumi:"status"`
	// The alternative domain names of the certificate
	SubjectAlternativeName *string `pulumi:"subjectAlternativeName"`
}

type LoadbalancerCertificateBetaState struct {
	// The main domain name of the certificate
	CommonName pulumi.StringPtrInput
	// The custom type certificate type configuration
	CustomCertificate LoadbalancerCertificateBetaCustomCertificatePtrInput
	// The identifier (SHA-1) of the certificate
	Fingerprint pulumi.StringPtrInput
	// The load-balancer ID
	LbId pulumi.StringPtrInput
	// The Let's Encrypt type certificate configuration
	Letsencrypt LoadbalancerCertificateBetaLetsencryptPtrInput
	// The name of the load-balancer certificate
	Name pulumi.StringPtrInput
	// The not valid after validity bound timestamp
	NotValidAfter pulumi.StringPtrInput
	// The not valid before validity bound timestamp
	NotValidBefore pulumi.StringPtrInput
	// The status of certificate
	Status pulumi.StringPtrInput
	// The alternative domain names of the certificate
	SubjectAlternativeName pulumi.StringPtrInput
}

func (LoadbalancerCertificateBetaState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerCertificateBetaState)(nil)).Elem()
}

type loadbalancerCertificateBetaArgs struct {
	// The custom type certificate type configuration
	CustomCertificate *LoadbalancerCertificateBetaCustomCertificate `pulumi:"customCertificate"`
	// The load-balancer ID
	LbId string `pulumi:"lbId"`
	// The Let's Encrypt type certificate configuration
	Letsencrypt *LoadbalancerCertificateBetaLetsencrypt `pulumi:"letsencrypt"`
	// The name of the load-balancer certificate
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoadbalancerCertificateBeta resource.
type LoadbalancerCertificateBetaArgs struct {
	// The custom type certificate type configuration
	CustomCertificate LoadbalancerCertificateBetaCustomCertificatePtrInput
	// The load-balancer ID
	LbId pulumi.StringInput
	// The Let's Encrypt type certificate configuration
	Letsencrypt LoadbalancerCertificateBetaLetsencryptPtrInput
	// The name of the load-balancer certificate
	Name pulumi.StringPtrInput
}

func (LoadbalancerCertificateBetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerCertificateBetaArgs)(nil)).Elem()
}
